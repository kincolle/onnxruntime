jobs:
- job: Linux_Build
  timeoutInMinutes: 360
  workspace:
    clean: all
  pool: Linux-CPU
  steps:
  - checkout: self
    clean: true
    submodules: recursive

  - task: Docker@2
    displayName: login
    inputs:
      containerRegistry: onnxruntimebuildcache
      command: login
      addPipelineData: false
  - task: CmdLine@2
    inputs:
      script: |
        mkdir -p $HOME/.onnx
        docker run --rm \
          --volume /data/onnx:/data/onnx:ro \
          --volume $(Build.SourcesDirectory):/onnxruntime_src \
          --volume $(Build.BinariesDirectory):/build \
          --volume /data/models:/build/models:ro \
          --volume $HOME/.onnx:/home/onnxruntimedev/.onnx \
          -e ALLOW_RELEASED_ONNX_OPSET_ONLY=0 \
          -e NIGHTLY_BUILD \
          -e BUILD_BUILDNUMBER \
          onnxruntimebuildcache.azurecr.io/internal/azureml/onnxruntimecentoscpubuild:chr \
            python3 /onnxruntime_src/tools/ci_build/build.py \
              --build_dir /build --cmake_generator Ninja \
              --config RelWithDebInfo \
              --skip_submodule_sync \
              --build_shared_lib \
              --parallel \
              --build_wheel \
              --use_openmp \
              --enable_onnx_tests \
              --enable_symbolic_shape_infer_tests \
              --enable_pybind --build_java --build_nodejs --cmake_extra_defines onnxruntime_USE_VALGRIND=ON
      workingDirectory: $(Build.SourcesDirectory)
  - task: Docker@2
    displayName: logout
    inputs:
      containerRegistry: onnxruntimebuildcache
      command: logout
      addPipelineData: false
  - task: PublishTestResults@2
    displayName: 'Publish unit test results'
    inputs:
      testResultsFiles: '**/*.results.xml'
      searchFolder: '$(Build.BinariesDirectory)'
      testRunTitle: 'Unit Test Run'
    condition: succeededOrFailed()


  - task: CopyFiles@2
    displayName: 'Copy valgrind log to: $(Build.ArtifactStagingDirectory)'
    inputs:
      SourceFolder: '$(Build.BinariesDirectory)/RelWithDebInfo/Testing/Temporary/'
      Contents: 'MemoryChecker.*.log'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
    condition: succeededOrFailed()

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: ONNXRuntime python wheel'
    inputs:
      ArtifactName: onnxruntime
    condition: succeededOrFailed()

  - template: templates/component-governance-component-detection-steps.yml
    parameters:
      condition: 'succeeded'

  - task: mspremier.PostBuildCleanup.PostBuildCleanup-task.PostBuildCleanup@3
    displayName: 'Clean Agent Directories'
    condition: always()
